import { parse, Root, Type, Service, Field } from "../proto.ts";

type TypeOrEnum = Type & { values: Record<string, number> };

export function serviceTyping(svc: Service) {
  const methods = Object.keys(svc.methods).map((name) => {
    const call = svc.methods[name];
    const req = call.requestType;
    const res = call.responseType;

    let returnType = `Promise<${res}>`;
    if (call.responseStream) {
      returnType = `AsyncGenerator<${res}>`;
    }
    return `  ${name}(request: ${req}): ${returnType};`;
  });

  return `export interface ${svc.name} {\n${methods.join("\n")}\n}`;
}

export function enumTyping(msg: TypeOrEnum) {
  const values = Object.keys(msg.values || {}).map((v) => `"${v}"`);
  return `export type ${msg.name} = ${values.join(" | ")} | string;`;
}

export function messageTyping(msg: TypeOrEnum) {
  if (msg.values) {
    return enumTyping(msg);
  }

  const fields = Object.values(msg.fields).map(
    (field) => `  ${fieldTyping(field)};`
  );
  return `export interface ${msg.name} {\n${fields.join("\n")}\n}`;
}

export function fieldTyping(field: Field) {
  let type = field.type || "any";
  let name = field.name;

  if (type === "bool") {
    type = "boolean";
  }

  if (type === "bytes") {
    type = "Uint8Array";
  }

  if (
    type === "int32" ||
    type === "int64" ||
    type === "uint32" ||
    type === "uint64" ||
    type === "double"
  ) {
    type = "number";
  }

  // TODO: add google.protobuf.* types mappings
  // TODO: add map typings

  if (field.repeated) {
    type += "[]";
    name += "?";
  }

  if (!field.repeated && field.optional) {
    name += "?";
  }

  return `${name}: ${type}`;
}

export function* allOfKind<T>(
  root: Root,
  detect: (r: T) => boolean
): Generator<T> {
  const t = root as unknown as T;
  if (t && detect(t)) {
    yield t;
  }
  for (const key of Object.keys(root.nested || {})) {
    yield* allOfKind<T>(root.nested![key] as Root, detect);
  }
}

export function fromProto(_root: string | Root): string {
  let root = _root as Root;
  if (typeof root === "string") {
    root = parse(root).root;
  }

  const dts = `
/* this code was generated by automated tool, 
   should not edit by hand */

${[...allOfKind<Service>(root, (s) => !!s.methods)]
  .map(serviceTyping)
  .join("\n\n")}

${[...allOfKind<TypeOrEnum>(root, (s) => !!s.fields || !!s.values)]
  .map(messageTyping)
  .join("\n\n")}`;

  return dts.slice(1);
}

if (import.meta.main && Deno.args[0]) {
  const url = new URL(Deno.args[0], `file://${Deno.cwd()}/`);
  const txt = await Deno.readTextFile(url.pathname);

  console.log(fromProto(txt));
}
